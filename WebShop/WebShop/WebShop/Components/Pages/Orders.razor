@page "/orders"
@using WebShop.Services
@inject OrderService OrderService
@inject ProductService ProductService

<PageTitle>Commandes</PageTitle>

<h1>Liste des commandes</h1>

@if (orders == null)
{
    <p>Chargement des commandes...</p>
}
else if (orders.Count == 0)
{
    <p>Aucune commande trouvée.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Commande ID</th>
                <th>Date de Commande</th>
                <th>Status</th>
                <th>Détails des Articles</th>
                <th>Montant Total</th>
                <th>Méthode de Paiement</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.Date.ToShortDateString()</td>
                    <td>@order.Status</td>
                    <td>
                        <ul>
                            @if (order.OrderItems != null)
                            {
                                foreach (var item in order.OrderItems)
                                {
                                    <li>Produit ID: @item.ProductId - Quantité: @item.Quantity</li>
                                }
                            }
                            else
                            {
                                <li>Aucun article dans cette commande.</li>
                            }
                        </ul>
                    </td>
                    <td>
                        @order.TotalAmount.ToString("C")
                    </td>
                    <td>
                        @if (order.Payments != null && order.Payments.Any())
                        {
                            foreach (var payment in order.Payments)
                            {
                                <div>@payment.PaymentMethod - @payment.Status</div>
                            }
                        }
                        else
                        {
                            <div>Aucun paiement trouvé</div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Order> orders;

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetAllOrdersAsync(); // Utilise OrderService

        foreach (var order in orders)
        {
            if (order.OrderItems != null && order.OrderItems.Any())
            {
                order.TotalAmount = await CalculateTotalAmountAsync(order.OrderItems);
            }
            else
            {
                order.TotalAmount = 0; // Si pas d'articles, le montant est 0
            }
        }
    }

    private async Task<decimal> CalculateTotalAmountAsync(ICollection<OrderItem> orderItems)
    {
        decimal total = 0;
        foreach (var item in orderItems)
        {
            total += await GetProductPriceAsync(item.ProductId) * item.Quantity; // Calcule le montant total
        }
        return total;
    }

    public class Order
    {
        public int OrderId { get; set; }
        public int CustomerId { get; set; }  // Managed externally
        public DateTime Date { get; set; }
        public string Status { get; set; }

        public ICollection<OrderItem> OrderItems { get; set; }
        public ICollection<Payment> Payments { get; set; }

        // Nouvelle propriété pour stocker le montant total
        public decimal TotalAmount { get; set; }
    }

    public class OrderItem
    {
        public int OrderItemId { get; set; }
        public int OrderId { get; set; }

        public Order? Order { get; set; }
        public int ProductId { get; set; }  // Managed externally
        public int Quantity { get; set; }
    }

    public class Payment
    {
        public int PaymentId { get; set; }
        public int OrderId { get; set; }
        public Order? Order { get; set; }

        public decimal Amount { get; set; }
        public DateTime PaymentDate { get; set; }
        public string PaymentMethod { get; set; }
        public string Status { get; set; }
    }

    private async Task<decimal> GetProductPriceAsync(int productId)
    {
        var product = await ProductService.GetProductAsync(productId);
        return product != null ? product.Price : 0;
    }

    public class Product
    {
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public int StockQuantity { get; set; }
        public int CategoryId { get; set; }
        public Category Category { get; set; }
        public int SupplierId { get; set; }
        public Supplier Supplier { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
    }

    public class Category
    {
        public int CategoryId { get; set; }
        public string CategoryName { get; set; }
        public string CategoryType { get; set; }
    }

    public class Supplier
    {
        public int SupplierId { get; set; }
        public string SupplierName { get; set; }
        public string ContactEmail { get; set; }
    }
}
