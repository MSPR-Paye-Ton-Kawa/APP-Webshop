@page "/orders"
@using WebShop.Services
@inject IJSRuntime JSRuntime
@inject OrderService OrderService

<PageTitle>Commandes</PageTitle>

<h3>Liste des commandes</h3>

@if (orders == null)
{
    <p>Chargement des commandes...</p>
}
else if (orders.Count == 0)
{
    <p>Aucune commande trouvée.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID Commande</th>
                <th>ID Client</th>
                <th>Date</th>
                <th>Statut</th>
                <th>Montant Total</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.CustomerId</td>
                    <td>@order.Date.ToShortDateString()</td>
                    <td>@order.Status</td>
                    <td>@order.TotalAmount €</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditOrder(order)">Modifier</button>
                        <button class="btn btn-danger" @onclick="() => DeleteOrder(order.OrderId)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-success" @onclick="AddNewOrder">Ajouter une commande</button>
}

@if (isEditing || isAdding)
{
    <EditForm Model="currentOrder" OnValidSubmit="SaveOrder">
        <div class="form-group">
            <label for="customerId">ID Client</label>
            <InputNumber id="customerId" class="form-control" @bind-Value="currentOrder.CustomerId" />
        </div>
        <div class="form-group">
            <label for="date">Date</label>
            <InputDate id="date" class="form-control" @bind-Value="currentOrder.Date" />
        </div>
        <div class="form-group">
            <label for="status">Statut</label>
            <InputText id="status" class="form-control" @bind-Value="currentOrder.Status" />
        </div>
        <div class="form-group">
            <label for="totalAmount">Montant Total</label>
            <InputNumber id="totalAmount" class="form-control" @bind-Value="currentOrder.TotalAmount" />
        </div>

        <button class="btn btn-primary" type="submit">Enregistrer</button>
        <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
    </EditForm>
}

@code {
    private List<Order> orders;
    private Order currentOrder = new Order();
    private bool isEditing = false;
    private bool isAdding = false;

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetAllOrdersAsync();
    }

    private void AddNewOrder()
    {
        currentOrder = new Order(); // Prépare une nouvelle commande vide
        isAdding = true;
        isEditing = false;
    }

    private void EditOrder(Order order)
    {
        currentOrder = order; // Remplit le formulaire avec les informations de la commande existante
        isEditing = true;
        isAdding = false;
    }

    private async Task SaveOrder()
    {
        if (isAdding)
        {
            await OrderService.CreateOrderAsync(currentOrder);
        }
        else if (isEditing)
        {
            await OrderService.UpdateOrderAsync(currentOrder);
        }

        orders = await OrderService.GetAllOrdersAsync(); // Mettre à jour la liste des commandes
        currentOrder = new Order(); // Réinitialise la commande après la sauvegarde
        isAdding = false;
        isEditing = false;
    }

    private void CancelEdit()
    {
        isEditing = false;
        isAdding = false;
        currentOrder = new Order(); // Réinitialise la commande
    }

    private async Task DeleteOrder(int orderId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Es-tu sûr de vouloir supprimer la commande {orderId} ?");
        if (confirmed)
        {
            await OrderService.DeleteOrderAsync(orderId);
            orders = await OrderService.GetAllOrdersAsync(); // Mettre à jour la liste des commandes après suppression
        }
    }

    public class Order
    {
        public int OrderId { get; set; }
        public int CustomerId { get; set; }
        public DateTime Date { get; set; }
        public string Status { get; set; }
        public decimal TotalAmount { get; set; }
        public ICollection<OrderItem> OrderItems { get; set; }
        public ICollection<Payment> Payments { get; set; }
    }

    public class OrderItem
    {
        public int OrderItemId { get; set; }
        public int OrderId { get; set; }
        public int ProductId { get; set; }
        public int Quantity { get; set; }
    }

    public class Payment
    {
        public int PaymentId { get; set; }
        public int OrderId { get; set; }
        public decimal Amount { get; set; }
        public DateTime PaymentDate { get; set; }
        public string PaymentMethod { get; set; }
        public string Status { get; set; }
    }
}