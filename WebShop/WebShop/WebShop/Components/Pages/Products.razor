@page "/products"
@using WebShop.Services
@inject IJSRuntime JSRuntime
@inject ProductService ProductService

<PageTitle>Produits</PageTitle>

<h3>Liste des produits</h3>

@if (products == null)
{
    <p>Chargement des produits...</p>
}
else if (products.Count == 0)
{
    <p>Aucun produit trouvé.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Description</th>
                <th>Prix</th>
                <th>Quantité en stock</th>
                <th>Catégorie</th>
                <th>Fournisseur</th>
                <th>Date de création</th>
                <th>Date de mise à jour</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price €</td>
                    <td>@product.StockQuantity</td>
                    <td>@product.Category?.CategoryName</td>
                    <td>@product.Supplier?.SupplierName</td>
                    <td>@product.CreatedAt.ToShortDateString()</td>
                    <td>@product.UpdatedAt.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditProduct(product)">Modifier</button>
                        <button class="btn btn-danger" @onclick="() => DeleteProduct(product.ProductId)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-success" @onclick="AddNewProduct">Ajouter un produit</button>
}

@if (isEditing || isAdding)
{
    <EditForm Model="currentProduct" OnValidSubmit="SaveProduct">
        <div class="form-group">
            <label for="name">Nom</label>
            <InputText id="name" class="form-control" @bind-Value="currentProduct.Name" />
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" class="form-control" @bind-Value="currentProduct.Description" />
        </div>
        <div class="form-group">
            <label for="price">Prix</label>
            <InputNumber id="price" class="form-control" @bind-Value="currentProduct.Price" />
        </div>
        <div class="form-group">
            <label for="stockQuantity">Quantité en stock</label>
            <InputNumber id="stockQuantity" class="form-control" @bind-Value="currentProduct.StockQuantity" />
        </div>
        <div class="form-group">
            <label for="categoryId">Catégorie ID</label>
            <InputNumber id="categoryId" class="form-control" @bind-Value="currentProduct.CategoryId" />
        </div>
        <div class="form-group">
            <label for="supplierId">Fournisseur ID</label>
            <InputNumber id="supplierId" class="form-control" @bind-Value="currentProduct.SupplierId" />
        </div>
        <button class="btn btn-primary" type="submit">Enregistrer</button>
        <button class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
    </EditForm>
}


@code {
    private List<Product> products;
    private Product currentProduct = new Product();
    private bool isEditing = false;
    private bool isAdding = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Chargement des produits...");
        products = await ProductService.GetAllProductsAsync();
        Console.WriteLine($"Nombre de produits chargés : {products?.Count ?? 0}");
    }

    // Ajouter un nouveau produit
    private void AddNewProduct()
    {
        Console.WriteLine("Le bouton Ajouter un produit a été cliqué");
        currentProduct = new Product(); // Prépare un nouveau produit vide
        isAdding = true;
        isEditing = false;
    }

    // Modifier un produit existant
    private void EditProduct(Product product)
    {
        Console.WriteLine("Le bouton Modifier un produit a été cliqué");
        currentProduct = product; // Remplit le formulaire avec les informations du produit existant
        isEditing = true;
        isAdding = false;
    }

    // Enregistrer un produit (ajouter ou modifier)
    private async Task SaveProduct()
    {
        try
        {
            if (isAdding)
            {
                Console.WriteLine("Ajout du produit...");
                // Ajoute les logs des données du produit avant l'envoi
                Console.WriteLine($"Nom : {currentProduct.Name}");
                Console.WriteLine($"Prix : {currentProduct.Price}");
                Console.WriteLine($"Description : {currentProduct.Description}");
                Console.WriteLine($"Quantité en stock : {currentProduct.StockQuantity}");
                Console.WriteLine($"ID de catégorie : {currentProduct.CategoryId}");
                Console.WriteLine($"ID de fournisseur : {currentProduct.SupplierId}");

                // Ajoute les timestamps
                currentProduct.CreatedAt = DateTime.Now;
                currentProduct.UpdatedAt = DateTime.Now;

                // Envoi de la requête POST à l'API
                await ProductService.CreateProductAsync(currentProduct);
            }
            else if (isEditing)
            {
                Console.WriteLine("Modification du produit...");
                currentProduct.UpdatedAt = DateTime.Now;
                await ProductService.UpdateProductAsync(currentProduct);
            }

            // Rafraîchir la liste des produits après ajout/modification
            products = await ProductService.GetAllProductsAsync();
            currentProduct = new Product(); // Réinitialise le produit après la sauvegarde
            isAdding = false;
            isEditing = false;

            StateHasChanged(); // Force la mise à jour de l'interface utilisateur
            Console.WriteLine("Produit enregistré et liste mise à jour");
        }
        catch (Exception ex)
        {
            // Affiche l'erreur détaillée dans la console
            Console.WriteLine($"Erreur lors de la sauvegarde du produit : {ex.Message}");
        }
    }

    // Annuler l'édition ou l'ajout
    private void CancelEdit()
    {
        Console.WriteLine("Le bouton Annuler a été cliqué");
        isEditing = false;
        isAdding = false;
        currentProduct = new Product(); // Réinitialise le produit
    }

    // Supprimer un produit
    private async Task DeleteProduct(int productId)
    {
        Console.WriteLine("Le bouton Supprimer un produit a été cliqué");
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Es-tu sûr de vouloir supprimer le produit {productId} ?" });
        if (confirmed)
        {
            await ProductService.DeleteProductAsync(productId);
            products = await ProductService.GetAllProductsAsync(); // Mettre à jour la liste des produits après suppression
        }
    }

    public class Product
    {
        public int ProductId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public int StockQuantity { get; set; }
        public int CategoryId { get; set; }
        public Category Category { get; set; }
        public int SupplierId { get; set; }
        public Supplier Supplier { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
    }

    public class Category
    {
        public int CategoryId { get; set; }
        public string CategoryName { get; set; }
        public string CategoryType { get; set; }
    }

    public class Supplier
    {
        public int SupplierId { get; set; }
        public string SupplierName { get; set; }
        public string ContactEmail { get; set; }
    }
}